// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PoolEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("created_at", Value.fromBigInt(BigInt.zero()));
    this.set("original_collection", Value.fromBytes(Bytes.empty()));
    this.set("collateral_coverage_rate", Value.fromBigInt(BigInt.zero()));
    this.set("interest_rate", Value.fromBigInt(BigInt.zero()));
    this.set("compound_interval", Value.fromBigInt(BigInt.zero()));
    this.set("burn_rate", Value.fromBigInt(BigInt.zero()));
    this.set("loan_term", Value.fromBigInt(BigInt.zero()));
    this.set("min_liquidity", Value.fromBigInt(BigInt.zero()));
    this.set("min_deposit", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolEntity", id.toString(), this);
    }
  }

  static load(id: string): PoolEntity | null {
    return changetype<PoolEntity | null>(store.get("PoolEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get created_at(): BigInt {
    let value = this.get("created_at");
    return value!.toBigInt();
  }

  set created_at(value: BigInt) {
    this.set("created_at", Value.fromBigInt(value));
  }

  get original_collection(): Bytes {
    let value = this.get("original_collection");
    return value!.toBytes();
  }

  set original_collection(value: Bytes) {
    this.set("original_collection", Value.fromBytes(value));
  }

  get collateral_coverage_rate(): BigInt {
    let value = this.get("collateral_coverage_rate");
    return value!.toBigInt();
  }

  set collateral_coverage_rate(value: BigInt) {
    this.set("collateral_coverage_rate", Value.fromBigInt(value));
  }

  get interest_rate(): BigInt {
    let value = this.get("interest_rate");
    return value!.toBigInt();
  }

  set interest_rate(value: BigInt) {
    this.set("interest_rate", Value.fromBigInt(value));
  }

  get compound_interval(): BigInt {
    let value = this.get("compound_interval");
    return value!.toBigInt();
  }

  set compound_interval(value: BigInt) {
    this.set("compound_interval", Value.fromBigInt(value));
  }

  get burn_rate(): BigInt {
    let value = this.get("burn_rate");
    return value!.toBigInt();
  }

  set burn_rate(value: BigInt) {
    this.set("burn_rate", Value.fromBigInt(value));
  }

  get loan_term(): BigInt {
    let value = this.get("loan_term");
    return value!.toBigInt();
  }

  set loan_term(value: BigInt) {
    this.set("loan_term", Value.fromBigInt(value));
  }

  get min_liquidity(): BigInt {
    let value = this.get("min_liquidity");
    return value!.toBigInt();
  }

  set min_liquidity(value: BigInt) {
    this.set("min_liquidity", Value.fromBigInt(value));
  }

  get min_deposit(): BigInt {
    let value = this.get("min_deposit");
    return value!.toBigInt();
  }

  set min_deposit(value: BigInt) {
    this.set("min_deposit", Value.fromBigInt(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get loans(): Array<string> {
    let value = this.get("loans");
    return value!.toStringArray();
  }

  set loans(value: Array<string>) {
    this.set("loans", Value.fromStringArray(value));
  }

  get repayments(): Array<string> {
    let value = this.get("repayments");
    return value!.toStringArray();
  }

  set repayments(value: Array<string>) {
    this.set("repayments", Value.fromStringArray(value));
  }
}

export class DepositEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("occurred_at", Value.fromBigInt(BigInt.zero()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositEntity | null {
    return changetype<DepositEntity | null>(store.get("DepositEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get occurred_at(): BigInt {
    let value = this.get("occurred_at");
    return value!.toBigInt();
  }

  set occurred_at(value: BigInt) {
    this.set("occurred_at", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class LoanEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("created_at", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
    this.set("token_id", Value.fromBigInt(BigInt.zero()));
    this.set("status", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LoanEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LoanEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LoanEntity", id.toString(), this);
    }
  }

  static load(id: string): LoanEntity | null {
    return changetype<LoanEntity | null>(store.get("LoanEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get created_at(): BigInt {
    let value = this.get("created_at");
    return value!.toBigInt();
  }

  set created_at(value: BigInt) {
    this.set("created_at", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get token_id(): BigInt {
    let value = this.get("token_id");
    return value!.toBigInt();
  }

  set token_id(value: BigInt) {
    this.set("token_id", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class RepayEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("occurred_at", Value.fromBigInt(BigInt.zero()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("token_id", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RepayEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RepayEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RepayEntity", id.toString(), this);
    }
  }

  static load(id: string): RepayEntity | null {
    return changetype<RepayEntity | null>(store.get("RepayEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get occurred_at(): BigInt {
    let value = this.get("occurred_at");
    return value!.toBigInt();
  }

  set occurred_at(value: BigInt) {
    this.set("occurred_at", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get token_id(): BigInt {
    let value = this.get("token_id");
    return value!.toBigInt();
  }

  set token_id(value: BigInt) {
    this.set("token_id", Value.fromBigInt(value));
  }
}

export class AccountEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AccountEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AccountEntity", id.toString(), this);
    }
  }

  static load(id: string): AccountEntity | null {
    return changetype<AccountEntity | null>(store.get("AccountEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get loans(): Array<string> {
    let value = this.get("loans");
    return value!.toStringArray();
  }

  set loans(value: Array<string>) {
    this.set("loans", Value.fromStringArray(value));
  }

  get repayments(): Array<string> {
    let value = this.get("repayments");
    return value!.toStringArray();
  }

  set repayments(value: Array<string>) {
    this.set("repayments", Value.fromStringArray(value));
  }
}
