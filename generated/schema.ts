// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PoolEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolEntity", id.toString(), this);
    }
  }

  static load(id: string): PoolEntity | null {
    return changetype<PoolEntity | null>(store.get("PoolEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get created_at(): BigInt {
    let value = this.get("created_at");
    return value!.toBigInt();
  }

  set created_at(value: BigInt) {
    this.set("created_at", Value.fromBigInt(value));
  }

  get synthetic_collection(): string {
    let value = this.get("synthetic_collection");
    return value!.toString();
  }

  set synthetic_collection(value: string) {
    this.set("synthetic_collection", Value.fromString(value));
  }

  get original_collection(): string {
    let value = this.get("original_collection");
    return value!.toString();
  }

  set original_collection(value: string) {
    this.set("original_collection", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateral_coverage_ratio(): BigInt {
    let value = this.get("collateral_coverage_ratio");
    return value!.toBigInt();
  }

  set collateral_coverage_ratio(value: BigInt) {
    this.set("collateral_coverage_ratio", Value.fromBigInt(value));
  }

  get interest_rate(): BigInt {
    let value = this.get("interest_rate");
    return value!.toBigInt();
  }

  set interest_rate(value: BigInt) {
    this.set("interest_rate", Value.fromBigInt(value));
  }

  get charge_interval(): BigInt {
    let value = this.get("charge_interval");
    return value!.toBigInt();
  }

  set charge_interval(value: BigInt) {
    this.set("charge_interval", Value.fromBigInt(value));
  }

  get burn_rate(): BigInt {
    let value = this.get("burn_rate");
    return value!.toBigInt();
  }

  set burn_rate(value: BigInt) {
    this.set("burn_rate", Value.fromBigInt(value));
  }

  get loan_term(): BigInt {
    let value = this.get("loan_term");
    return value!.toBigInt();
  }

  set loan_term(value: BigInt) {
    this.set("loan_term", Value.fromBigInt(value));
  }

  get min_liquidity(): BigInt {
    let value = this.get("min_liquidity");
    return value!.toBigInt();
  }

  set min_liquidity(value: BigInt) {
    this.set("min_liquidity", Value.fromBigInt(value));
  }

  get min_deposit(): BigInt {
    let value = this.get("min_deposit");
    return value!.toBigInt();
  }

  set min_deposit(value: BigInt) {
    this.set("min_deposit", Value.fromBigInt(value));
  }

  get payment_frequency(): BigInt {
    let value = this.get("payment_frequency");
    return value!.toBigInt();
  }

  set payment_frequency(value: BigInt) {
    this.set("payment_frequency", Value.fromBigInt(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get loans(): Array<string> {
    let value = this.get("loans");
    return value!.toStringArray();
  }

  set loans(value: Array<string>) {
    this.set("loans", Value.fromStringArray(value));
  }

  get repayments(): Array<string> {
    let value = this.get("repayments");
    return value!.toStringArray();
  }

  set repayments(value: Array<string>) {
    this.set("repayments", Value.fromStringArray(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class SyntheticCollectionEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SyntheticCollectionEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SyntheticCollectionEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SyntheticCollectionEntity", id.toString(), this);
    }
  }

  static load(id: string): SyntheticCollectionEntity | null {
    return changetype<SyntheticCollectionEntity | null>(
      store.get("SyntheticCollectionEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }
}

export class OriginalCollectionEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save OriginalCollectionEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OriginalCollectionEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OriginalCollectionEntity", id.toString(), this);
    }
  }

  static load(id: string): OriginalCollectionEntity | null {
    return changetype<OriginalCollectionEntity | null>(
      store.get("OriginalCollectionEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }
}

export class TokenEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenEntity", id.toString(), this);
    }
  }

  static load(id: string): TokenEntity | null {
    return changetype<TokenEntity | null>(store.get("TokenEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }
}

export class DepositEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DepositEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositEntity | null {
    return changetype<DepositEntity | null>(store.get("DepositEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get occurred_at(): BigInt {
    let value = this.get("occurred_at");
    return value!.toBigInt();
  }

  set occurred_at(value: BigInt) {
    this.set("occurred_at", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class InstallmentEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InstallmentEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InstallmentEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InstallmentEntity", id.toString(), this);
    }
  }

  static load(id: string): InstallmentEntity | null {
    return changetype<InstallmentEntity | null>(
      store.get("InstallmentEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get due_at(): BigInt {
    let value = this.get("due_at");
    return value!.toBigInt();
  }

  set due_at(value: BigInt) {
    this.set("due_at", Value.fromBigInt(value));
  }

  get loan(): string {
    let value = this.get("loan");
    return value!.toString();
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }
}

export class LoanEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LoanEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LoanEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LoanEntity", id.toString(), this);
    }
  }

  static load(id: string): LoanEntity | null {
    return changetype<LoanEntity | null>(store.get("LoanEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get created_at(): BigInt {
    let value = this.get("created_at");
    return value!.toBigInt();
  }

  set created_at(value: BigInt) {
    this.set("created_at", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get principal(): BigInt {
    let value = this.get("principal");
    return value!.toBigInt();
  }

  set principal(value: BigInt) {
    this.set("principal", Value.fromBigInt(value));
  }

  get interest(): BigInt {
    let value = this.get("interest");
    return value!.toBigInt();
  }

  set interest(value: BigInt) {
    this.set("interest", Value.fromBigInt(value));
  }

  get daily_percent_rate(): BigInt {
    let value = this.get("daily_percent_rate");
    return value!.toBigInt();
  }

  set daily_percent_rate(value: BigInt) {
    this.set("daily_percent_rate", Value.fromBigInt(value));
  }

  get payment_frequency(): BigInt {
    let value = this.get("payment_frequency");
    return value!.toBigInt();
  }

  set payment_frequency(value: BigInt) {
    this.set("payment_frequency", Value.fromBigInt(value));
  }

  get loan_term(): BigInt {
    let value = this.get("loan_term");
    return value!.toBigInt();
  }

  set loan_term(value: BigInt) {
    this.set("loan_term", Value.fromBigInt(value));
  }

  get finalized_at(): BigInt {
    let value = this.get("finalized_at");
    return value!.toBigInt();
  }

  set finalized_at(value: BigInt) {
    this.set("finalized_at", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get repayment_allowance(): BigInt {
    let value = this.get("repayment_allowance");
    return value!.toBigInt();
  }

  set repayment_allowance(value: BigInt) {
    this.set("repayment_allowance", Value.fromBigInt(value));
  }

  get installments(): Array<string> {
    let value = this.get("installments");
    return value!.toStringArray();
  }

  set installments(value: Array<string>) {
    this.set("installments", Value.fromStringArray(value));
  }

  get installments_remaining(): BigInt {
    let value = this.get("installments_remaining");
    return value!.toBigInt();
  }

  set installments_remaining(value: BigInt) {
    this.set("installments_remaining", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    return value!.toBigInt();
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get token_id(): BigInt {
    let value = this.get("token_id");
    return value!.toBigInt();
  }

  set token_id(value: BigInt) {
    this.set("token_id", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class RepayEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RepayEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RepayEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RepayEntity", id.toString(), this);
    }
  }

  static load(id: string): RepayEntity | null {
    return changetype<RepayEntity | null>(store.get("RepayEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get occurred_at(): BigInt {
    let value = this.get("occurred_at");
    return value!.toBigInt();
  }

  set occurred_at(value: BigInt) {
    this.set("occurred_at", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get token_id(): BigInt {
    let value = this.get("token_id");
    return value!.toBigInt();
  }

  set token_id(value: BigInt) {
    this.set("token_id", Value.fromBigInt(value));
  }
}

export class AccountEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountEntity", id.toString(), this);
    }
  }

  static load(id: string): AccountEntity | null {
    return changetype<AccountEntity | null>(store.get("AccountEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get loans(): Array<string> {
    let value = this.get("loans");
    return value!.toStringArray();
  }

  set loans(value: Array<string>) {
    this.set("loans", Value.fromStringArray(value));
  }

  get repayments(): Array<string> {
    let value = this.get("repayments");
    return value!.toStringArray();
  }

  set repayments(value: Array<string>) {
    this.set("repayments", Value.fromStringArray(value));
  }
}

export class EventEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EventEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EventEntity", id.toString(), this);
    }
  }

  static load(id: string): EventEntity | null {
    return changetype<EventEntity | null>(store.get("EventEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get parent_id(): string {
    let value = this.get("parent_id");
    return value!.toString();
  }

  set parent_id(value: string) {
    this.set("parent_id", Value.fromString(value));
  }

  get event_type(): string {
    let value = this.get("event_type");
    return value!.toString();
  }

  set event_type(value: string) {
    this.set("event_type", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get occurred_at(): BigInt {
    let value = this.get("occurred_at");
    return value!.toBigInt();
  }

  set occurred_at(value: BigInt) {
    this.set("occurred_at", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get token_id(): BigInt | null {
    let value = this.get("token_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set token_id(value: BigInt | null) {
    if (!value) {
      this.unset("token_id");
    } else {
      this.set("token_id", Value.fromBigInt(<BigInt>value));
    }
  }
}
