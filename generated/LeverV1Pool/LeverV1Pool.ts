// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AssetPurchase extends ethereum.Event {
  get params(): AssetPurchase__Params {
    return new AssetPurchase__Params(this);
  }
}

export class AssetPurchase__Params {
  _event: AssetPurchase;

  constructor(event: AssetPurchase) {
    this._event = event;
  }

  get marketplace(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get exchangeLocation(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Collect extends ethereum.Event {
  get params(): Collect__Params {
    return new Collect__Params(this);
  }
}

export class Collect__Params {
  _event: Collect;

  constructor(event: Collect) {
    this._event = event;
  }

  get collector(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Create extends ethereum.Event {
  get params(): Create__Params {
    return new Create__Params(this);
  }
}

export class Create__Params {
  _event: Create;

  constructor(event: Create) {
    this._event = event;
  }

  get originalCollection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collaterateCoverageRatio(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get compoundInterval(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get burnRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get loanTerm(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get minLiquduity(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get minDeposit(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Liquidate extends ethereum.Event {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LeverV1Pool__getTokenLoanStatusResultValue0Struct extends ethereum.Tuple {
  get lastCharge(): BigInt {
    return this[0].toBigInt();
  }

  get principal(): BigInt {
    return this[1].toBigInt();
  }

  get interest(): BigInt {
    return this[2].toBigInt();
  }

  get dailyPercentRate(): BigInt {
    return this[3].toBigInt();
  }

  get paymentFrequency(): BigInt {
    return this[4].toBigInt();
  }

  get borrower(): Address {
    return this[5].toAddress();
  }

  get createdTimestamp(): BigInt {
    return this[6].toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get loanTerm(): BigInt {
    return this[8].toBigInt();
  }

  get finalizedTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get active(): boolean {
    return this[10].toBoolean();
  }

  get repaymentAllowance(): BigInt {
    return this[11].toBigInt();
  }

  get installments(): Array<
    LeverV1Pool__getTokenLoanStatusResultValue0InstallmentsStruct
  > {
    return this[12].toTupleArray<
      LeverV1Pool__getTokenLoanStatusResultValue0InstallmentsStruct
    >();
  }

  get installmentsRemaining(): BigInt {
    return this[13].toBigInt();
  }

  get collateral(): BigInt {
    return this[14].toBigInt();
  }
}

export class LeverV1Pool__getTokenLoanStatusResultValue0InstallmentsStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get dueTimestamp(): BigInt {
    return this[1].toBigInt();
  }
}

export class LeverV1Pool__positionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: boolean;
  value11: BigInt;
  value12: BigInt;
  value13: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: boolean,
    value11: BigInt,
    value12: BigInt,
    value13: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
    this.value13 = value13;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    map.set("value13", ethereum.Value.fromUnsignedBigInt(this.value13));
    return map;
  }

  getLastCharge(): BigInt {
    return this.value0;
  }

  getPrincipal(): BigInt {
    return this.value1;
  }

  getInterest(): BigInt {
    return this.value2;
  }

  getDailyPercentRate(): BigInt {
    return this.value3;
  }

  getPaymentFrequency(): BigInt {
    return this.value4;
  }

  getBorrower(): Address {
    return this.value5;
  }

  getCreatedTimestamp(): BigInt {
    return this.value6;
  }

  getExpirationTimestamp(): BigInt {
    return this.value7;
  }

  getLoanTerm(): BigInt {
    return this.value8;
  }

  getFinalizedTimestamp(): BigInt {
    return this.value9;
  }

  getActive(): boolean {
    return this.value10;
  }

  getRepaymentAllowance(): BigInt {
    return this.value11;
  }

  getInstallmentsRemaining(): BigInt {
    return this.value12;
  }

  getCollateral(): BigInt {
    return this.value13;
  }
}

export class LeverV1Pool extends ethereum.SmartContract {
  static bind(address: Address): LeverV1Pool {
    return new LeverV1Pool("LeverV1Pool", address);
  }

  LOOKSRARE_EXCHANGE(): Address {
    let result = super.call(
      "LOOKSRARE_EXCHANGE",
      "LOOKSRARE_EXCHANGE():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_LOOKSRARE_EXCHANGE(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "LOOKSRARE_EXCHANGE",
      "LOOKSRARE_EXCHANGE():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  OPENSEA_EXCHANGE(): Address {
    let result = super.call(
      "OPENSEA_EXCHANGE",
      "OPENSEA_EXCHANGE():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_OPENSEA_EXCHANGE(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "OPENSEA_EXCHANGE",
      "OPENSEA_EXCHANGE():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETHContract(): Address {
    let result = super.call("WETHContract", "WETHContract():(address)", []);

    return result[0].toAddress();
  }

  try_WETHContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETHContract", "WETHContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  activePositions(param0: BigInt): BigInt {
    let result = super.call(
      "activePositions",
      "activePositions(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_activePositions(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activePositions",
      "activePositions(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnRate(): BigInt {
    let result = super.call("burnRate", "burnRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_burnRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burnRate", "burnRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateInterest(_principal: BigInt, _dailyPercentRate: BigInt): BigInt {
    let result = super.call(
      "calculateInterest",
      "calculateInterest(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_principal),
        ethereum.Value.fromUnsignedBigInt(_dailyPercentRate)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateInterest(
    _principal: BigInt,
    _dailyPercentRate: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateInterest",
      "calculateInterest(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_principal),
        ethereum.Value.fromUnsignedBigInt(_dailyPercentRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canCharge(): boolean {
    let result = super.call("canCharge", "canCharge():(bool)", []);

    return result[0].toBoolean();
  }

  try_canCharge(): ethereum.CallResult<boolean> {
    let result = super.tryCall("canCharge", "canCharge():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  chargeInterval(): BigInt {
    let result = super.call("chargeInterval", "chargeInterval():(uint256)", []);

    return result[0].toBigInt();
  }

  try_chargeInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "chargeInterval",
      "chargeInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralCoverageRatio(): BigInt {
    let result = super.call(
      "collateralCoverageRatio",
      "collateralCoverageRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralCoverageRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralCoverageRatio",
      "collateralCoverageRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectorsQueue(param0: BigInt): BigInt {
    let result = super.call(
      "collectorsQueue",
      "collectorsQueue(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_collectorsQueue(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectorsQueue",
      "collectorsQueue(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deployer(): Address {
    let result = super.call("deployer", "deployer():(address)", []);

    return result[0].toAddress();
  }

  try_deployer(): ethereum.CallResult<Address> {
    let result = super.tryCall("deployer", "deployer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenLoanStatus(
    tokenId: BigInt
  ): LeverV1Pool__getTokenLoanStatusResultValue0Struct {
    let result = super.call(
      "getTokenLoanStatus",
      "getTokenLoanStatus(uint256):((uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bool,uint256,(uint256,uint256)[],uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<LeverV1Pool__getTokenLoanStatusResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTokenLoanStatus(
    tokenId: BigInt
  ): ethereum.CallResult<LeverV1Pool__getTokenLoanStatusResultValue0Struct> {
    let result = super.tryCall(
      "getTokenLoanStatus",
      "getTokenLoanStatus(uint256):((uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bool,uint256,(uint256,uint256)[],uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LeverV1Pool__getTokenLoanStatusResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  holdings(param0: Address): BigInt {
    let result = super.call("holdings", "holdings(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_holdings(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("holdings", "holdings(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestRate(): BigInt {
    let result = super.call("interestRate", "interestRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interestRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interestRate", "interestRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationQueue(param0: BigInt): BigInt {
    let result = super.call(
      "liquidationQueue",
      "liquidationQueue(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_liquidationQueue(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationQueue",
      "liquidationQueue(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanTerm(): BigInt {
    let result = super.call("loanTerm", "loanTerm():(uint256)", []);

    return result[0].toBigInt();
  }

  try_loanTerm(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("loanTerm", "loanTerm():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minDeposit(): BigInt {
    let result = super.call("minDeposit", "minDeposit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minDeposit", "minDeposit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minLiquidity(): BigInt {
    let result = super.call("minLiquidity", "minLiquidity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minLiquidity", "minLiquidity():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  originalCollection(): Address {
    let result = super.call(
      "originalCollection",
      "originalCollection():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_originalCollection(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "originalCollection",
      "originalCollection():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owners(param0: BigInt): Address {
    let result = super.call("owners", "owners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_owners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("owners", "owners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentFrequency(): BigInt {
    let result = super.call(
      "paymentFrequency",
      "paymentFrequency():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_paymentFrequency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentFrequency",
      "paymentFrequency():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolToken(): Address {
    let result = super.call("poolToken", "poolToken():(address)", []);

    return result[0].toAddress();
  }

  try_poolToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolToken", "poolToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  positions(param0: BigInt): LeverV1Pool__positionsResult {
    let result = super.call(
      "positions",
      "positions(uint256):(uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LeverV1Pool__positionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBoolean(),
      result[11].toBigInt(),
      result[12].toBigInt(),
      result[13].toBigInt()
    );
  }

  try_positions(
    param0: BigInt
  ): ethereum.CallResult<LeverV1Pool__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(uint256):(uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LeverV1Pool__positionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBoolean(),
        value[11].toBigInt(),
        value[12].toBigInt(),
        value[13].toBigInt()
      )
    );
  }

  principals(param0: Address): BigInt {
    let result = super.call("principals", "principals(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_principals(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("principals", "principals(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  syntheticCollection(): Address {
    let result = super.call(
      "syntheticCollection",
      "syntheticCollection():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_syntheticCollection(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "syntheticCollection",
      "syntheticCollection():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wenCharge(): BigInt {
    let result = super.call("wenCharge", "wenCharge():(uint256)", []);

    return result[0].toBigInt();
  }

  try_wenCharge(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wenCharge", "wenCharge():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _originalCollection(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collateralCoverageRatio(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _interestRate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _chargeInterval(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _burnRate(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _loanTerm(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _minLiquidity(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _minDeposit(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _paymentFrequency(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _deployer(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get assetData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get purchaseData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class ChargeInterestCall extends ethereum.Call {
  get inputs(): ChargeInterestCall__Inputs {
    return new ChargeInterestCall__Inputs(this);
  }

  get outputs(): ChargeInterestCall__Outputs {
    return new ChargeInterestCall__Outputs(this);
  }
}

export class ChargeInterestCall__Inputs {
  _call: ChargeInterestCall;

  constructor(call: ChargeInterestCall) {
    this._call = call;
  }
}

export class ChargeInterestCall__Outputs {
  _call: ChargeInterestCall;

  constructor(call: ChargeInterestCall) {
    this._call = call;
  }
}

export class CollapseCall extends ethereum.Call {
  get inputs(): CollapseCall__Inputs {
    return new CollapseCall__Inputs(this);
  }

  get outputs(): CollapseCall__Outputs {
    return new CollapseCall__Outputs(this);
  }
}

export class CollapseCall__Inputs {
  _call: CollapseCall;

  constructor(call: CollapseCall) {
    this._call = call;
  }
}

export class CollapseCall__Outputs {
  _call: CollapseCall;

  constructor(call: CollapseCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amountRequested(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class LiquidateAllCall extends ethereum.Call {
  get inputs(): LiquidateAllCall__Inputs {
    return new LiquidateAllCall__Inputs(this);
  }

  get outputs(): LiquidateAllCall__Outputs {
    return new LiquidateAllCall__Outputs(this);
  }
}

export class LiquidateAllCall__Inputs {
  _call: LiquidateAllCall;

  constructor(call: LiquidateAllCall) {
    this._call = call;
  }
}

export class LiquidateAllCall__Outputs {
  _call: LiquidateAllCall;

  constructor(call: LiquidateAllCall) {
    this._call = call;
  }
}

export class OfferCall extends ethereum.Call {
  get inputs(): OfferCall__Inputs {
    return new OfferCall__Inputs(this);
  }

  get outputs(): OfferCall__Outputs {
    return new OfferCall__Outputs(this);
  }
}

export class OfferCall__Inputs {
  _call: OfferCall;

  constructor(call: OfferCall) {
    this._call = call;
  }
}

export class OfferCall__Outputs {
  _call: OfferCall;

  constructor(call: OfferCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PurchaseCall extends ethereum.Call {
  get inputs(): PurchaseCall__Inputs {
    return new PurchaseCall__Inputs(this);
  }

  get outputs(): PurchaseCall__Outputs {
    return new PurchaseCall__Outputs(this);
  }
}

export class PurchaseCall__Inputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get marketplace(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PurchaseCall__Outputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get _success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class QuickSellCall extends ethereum.Call {
  get inputs(): QuickSellCall__Inputs {
    return new QuickSellCall__Inputs(this);
  }

  get outputs(): QuickSellCall__Outputs {
    return new QuickSellCall__Outputs(this);
  }
}

export class QuickSellCall__Inputs {
  _call: QuickSellCall;

  constructor(call: QuickSellCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class QuickSellCall__Outputs {
  _call: QuickSellCall;

  constructor(call: QuickSellCall) {
    this._call = call;
  }
}

export class QuickSell1Call extends ethereum.Call {
  get inputs(): QuickSell1Call__Inputs {
    return new QuickSell1Call__Inputs(this);
  }

  get outputs(): QuickSell1Call__Outputs {
    return new QuickSell1Call__Outputs(this);
  }
}

export class QuickSell1Call__Inputs {
  _call: QuickSell1Call;

  constructor(call: QuickSell1Call) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class QuickSell1Call__Outputs {
  _call: QuickSell1Call;

  constructor(call: QuickSell1Call) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class SetBurnRateCall extends ethereum.Call {
  get inputs(): SetBurnRateCall__Inputs {
    return new SetBurnRateCall__Inputs(this);
  }

  get outputs(): SetBurnRateCall__Outputs {
    return new SetBurnRateCall__Outputs(this);
  }
}

export class SetBurnRateCall__Inputs {
  _call: SetBurnRateCall;

  constructor(call: SetBurnRateCall) {
    this._call = call;
  }

  get _burnRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBurnRateCall__Outputs {
  _call: SetBurnRateCall;

  constructor(call: SetBurnRateCall) {
    this._call = call;
  }
}

export class SetChargeIntervalCall extends ethereum.Call {
  get inputs(): SetChargeIntervalCall__Inputs {
    return new SetChargeIntervalCall__Inputs(this);
  }

  get outputs(): SetChargeIntervalCall__Outputs {
    return new SetChargeIntervalCall__Outputs(this);
  }
}

export class SetChargeIntervalCall__Inputs {
  _call: SetChargeIntervalCall;

  constructor(call: SetChargeIntervalCall) {
    this._call = call;
  }

  get _chargeInterval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetChargeIntervalCall__Outputs {
  _call: SetChargeIntervalCall;

  constructor(call: SetChargeIntervalCall) {
    this._call = call;
  }
}

export class SetCollateralCoverageRatioCall extends ethereum.Call {
  get inputs(): SetCollateralCoverageRatioCall__Inputs {
    return new SetCollateralCoverageRatioCall__Inputs(this);
  }

  get outputs(): SetCollateralCoverageRatioCall__Outputs {
    return new SetCollateralCoverageRatioCall__Outputs(this);
  }
}

export class SetCollateralCoverageRatioCall__Inputs {
  _call: SetCollateralCoverageRatioCall;

  constructor(call: SetCollateralCoverageRatioCall) {
    this._call = call;
  }

  get _collateralCoverageRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCollateralCoverageRatioCall__Outputs {
  _call: SetCollateralCoverageRatioCall;

  constructor(call: SetCollateralCoverageRatioCall) {
    this._call = call;
  }
}

export class SetDeployerCall extends ethereum.Call {
  get inputs(): SetDeployerCall__Inputs {
    return new SetDeployerCall__Inputs(this);
  }

  get outputs(): SetDeployerCall__Outputs {
    return new SetDeployerCall__Outputs(this);
  }
}

export class SetDeployerCall__Inputs {
  _call: SetDeployerCall;

  constructor(call: SetDeployerCall) {
    this._call = call;
  }

  get _deployer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDeployerCall__Outputs {
  _call: SetDeployerCall;

  constructor(call: SetDeployerCall) {
    this._call = call;
  }
}

export class SetInterestRateCall extends ethereum.Call {
  get inputs(): SetInterestRateCall__Inputs {
    return new SetInterestRateCall__Inputs(this);
  }

  get outputs(): SetInterestRateCall__Outputs {
    return new SetInterestRateCall__Outputs(this);
  }
}

export class SetInterestRateCall__Inputs {
  _call: SetInterestRateCall;

  constructor(call: SetInterestRateCall) {
    this._call = call;
  }

  get _interestRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInterestRateCall__Outputs {
  _call: SetInterestRateCall;

  constructor(call: SetInterestRateCall) {
    this._call = call;
  }
}

export class SetLoanTermCall extends ethereum.Call {
  get inputs(): SetLoanTermCall__Inputs {
    return new SetLoanTermCall__Inputs(this);
  }

  get outputs(): SetLoanTermCall__Outputs {
    return new SetLoanTermCall__Outputs(this);
  }
}

export class SetLoanTermCall__Inputs {
  _call: SetLoanTermCall;

  constructor(call: SetLoanTermCall) {
    this._call = call;
  }

  get _loanTerm(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLoanTermCall__Outputs {
  _call: SetLoanTermCall;

  constructor(call: SetLoanTermCall) {
    this._call = call;
  }
}

export class SetMinDepositCall extends ethereum.Call {
  get inputs(): SetMinDepositCall__Inputs {
    return new SetMinDepositCall__Inputs(this);
  }

  get outputs(): SetMinDepositCall__Outputs {
    return new SetMinDepositCall__Outputs(this);
  }
}

export class SetMinDepositCall__Inputs {
  _call: SetMinDepositCall;

  constructor(call: SetMinDepositCall) {
    this._call = call;
  }

  get _minDeposit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinDepositCall__Outputs {
  _call: SetMinDepositCall;

  constructor(call: SetMinDepositCall) {
    this._call = call;
  }
}

export class SetMinLiquidityCall extends ethereum.Call {
  get inputs(): SetMinLiquidityCall__Inputs {
    return new SetMinLiquidityCall__Inputs(this);
  }

  get outputs(): SetMinLiquidityCall__Outputs {
    return new SetMinLiquidityCall__Outputs(this);
  }
}

export class SetMinLiquidityCall__Inputs {
  _call: SetMinLiquidityCall;

  constructor(call: SetMinLiquidityCall) {
    this._call = call;
  }

  get _minLiquidity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinLiquidityCall__Outputs {
  _call: SetMinLiquidityCall;

  constructor(call: SetMinLiquidityCall) {
    this._call = call;
  }
}

export class UnwrapCall extends ethereum.Call {
  get inputs(): UnwrapCall__Inputs {
    return new UnwrapCall__Inputs(this);
  }

  get outputs(): UnwrapCall__Outputs {
    return new UnwrapCall__Outputs(this);
  }
}

export class UnwrapCall__Inputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }
}

export class UnwrapCall__Outputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }
}
